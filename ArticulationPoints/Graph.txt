import java.io.*; 
import java.util.*;
import java.util.LinkedList; 

public class Graph {

	private int V;   // No. of vertexes
	
	// Array  of lists for Adjacency List Representation 
    private LinkedList<Integer> adj[]; 
    int time = 0; 
    static final int root = -1; 
    
    // Constructor 
    Graph(int v) 
    { 
        V = v; 
        adj = new LinkedList[v]; 
        for (int i=0; i<v; ++i) 
            adj[i] = new LinkedList(); 
    }
    
  //Function to add an edge into the graph 
    void addEdge(int v, int u) 
    { 
        adj[v].add(u);  // Add u to v's list. 
        adj[u].add(v);    //Add v to u's list 
    }
    
    // u --> Child vertex 
    // visited[] --> keeps track of visited vertices 
    // disc[] --> Stores discovery times of visited vertices 
    // parent[] --> Stores parent vertices in DFS tree 
    // ap[] --> Store articulation points
    void ArtiPointUtilization(int u, boolean visited[], int disc[],int low[], int parent[], boolean ap[]) 
    {
    	// Count of children in DFS Tree 
        int children = 0;
        
        // Mark the current node as visited 
        visited[u] = true;
        
        // Initialize discovery time and low value 
        disc[u] = low[u] = ++time;
    	
        // Go through all vertices aadjacent to this 
        Iterator<Integer> i = adj[u].iterator(); 
        while (i.hasNext()) 
        {
        	int v = i.next();  // v is current adjacent of u
        	
        	// If v is not visited yet, then make it a child of u 
            // in DFS tree and recur for it
        	
        	if (!visited[v]) 
            { 
                children++; 
                parent[v] = u; 
                ArtiPointUtilization(v, visited, disc, low, parent, ap); 

                // Check if the subtree rooted with v has a connection to 
                // one of the ancestors of u 
                low[u]  = Math.min(low[u], low[v]); 

                // u is an articulation point in following cases 

                // (1) u is root of DFS tree and has two or more chilren. 
                if (parent[u] == root && children > 1) 
                    ap[u] = true; 

                // (2) If u is not root and low value of one of its child 
                // is more than discovery value of u. 
                if (parent[u] != root && low[v] >= disc[u]) 
                    ap[u] = true; 
            }
        	// Update low value of u for parent function calls. 
            else if (v != parent[u]) {
            	low[u]  = Math.min(low[u], disc[v]);
            }
        }
    }
    
    // The function to do DFS traversal. It uses recursive function APUtil() 
    void ArticulationPoint() 
    { 
        // Mark all the vertices as not visited 
        boolean visited[] = new boolean[V]; 
        int disc[] = new int[V]; 
        int low[] = new int[V]; 
        int parent[] = new int[V]; 
        boolean ap[] = new boolean[V]; // To store articulation points 
  
        // Initialize parent and visited, and ap(articulation point) 
        // arrays 
        for (int i = 0; i < V; i++) 
        { 
            parent[i] = root; 
            visited[i] = false; 
            ap[i] = false; 
        } 
  
        // Call the recursive helper function to find articulation 
        // points in DFS tree rooted with vertex 'i' 
        for (int i = 0; i < V; i++) 
            if (visited[i] == false) 
            	ArtiPointUtilization(i, visited, disc, low, parent, ap); 
  
        // Now ap[] contains articulation points, print them 
        for (int i = 0; i < V; i++) 
            if (ap[i] == true) 
                System.out.print(i+" "); 
    } 
    
    // Driver method 
    public static void main(String args[]) 
    { 
        // Create graphs given in above diagrams
    	int vertices=9;
        System.out.println("Articulation points in a graph [out of "+vertices+" vertices]."); 
        Graph g1 = new Graph(vertices); 
        g1.addEdge(0, 1); 
        g1.addEdge(0, 3); 
        g1.addEdge(3, 2); 
        g1.addEdge(1, 2); 
        g1.addEdge(2, 4); 
        g1.addEdge(4, 5); 
        g1.addEdge(5, 6); 
        g1.addEdge(6, 7); 
        g1.addEdge(7, 8);
        g1.addEdge(6, 8);
        g1.ArticulationPoint(); 
        System.out.println();       
    } 
    
}    
        
        
        
        
                
        	
        	
     

     

     

     
         

         
         

       